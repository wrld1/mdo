generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int           @id @default(autoincrement())
  email              String?        @unique
  password           String
  name               String?
  phoneNumber        String?       @unique 
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  isVerified         Boolean       @default(false)
  authType                String?       @default("EMAIL")
  phoneVerificationCode   String?
  phoneVerificationExpires DateTime?
  refreshToken       String?
  fraudStatus        FraudStatus   @default(CLEAR)
  metadata           Json?         @db.JsonB
  acl                Acl[]
  companies          UserCompany[]
  dwelling           Dwelling[]
  orders             Order[]
  responsibleOrders  Order[]       @relation("ResponsibleUser")

  @@map("user")
}

model Acl {
  id         Int           @id @default(autoincrement())
  userId     Int
  resource   String
  permission AclPermission
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Company {
  id        String        @id @default(uuid())
  name      String?
  code      Int
  type      CompanyType
  status    CompanyStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  objects   Object[]
  users     UserCompany[]
  orders    Order[]

  @@map("company")
}

model UserCompany {
  id        Int     @id @default(autoincrement())
  userId    Int
  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, companyId])
}

model Object {
  id      String     @id @default(uuid())
  address String
  type    ObjectType

  company   Company?   @relation(fields: [companyId], references: [id])
  companyId String?
  services  Service[]
  dwelling  Dwelling[]
  orders    Order[]
}

model Dwelling {
  id       Int  @id @default(autoincrement())
  number   Int  
  floor    Int?
  entrance Int?
  square  Int?

  objectId        String
  object          Object            @relation(fields: [objectId], references: [id], onDelete: Cascade)
  userId          Int?
  user            User?             @relation(fields: [userId], references: [id])
  services        Service[]
  DwellingService DwellingService[]
  orders          Order[]
}

model DwellingService {
  id        Int                   @id @default(autoincrement())
  status    DwellingServiceStatus
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  dwelling   Dwelling @relation(fields: [dwellingId], references: [id], onDelete: Cascade)
  dwellingId Int
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int
  payments DwellingServicePayment[]
}

model Service {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  logo        String

  object          Object?           @relation(fields: [objectId], references: [id])
  objectId        String?
  dwelling        Dwelling?         @relation(fields: [dwellingId], references: [id])
  dwellingId      Int?
  DwellingService DwellingService[]
}

 model DwellingServicePayment {
  id               Int       @id @default(autoincrement())
  month             Int      
  year              Int 
  amount           Decimal
  counter          Decimal
  status           DwellingServicePaymentStatus
  paymentDate      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  dwellingService   DwellingService @relation(fields: [dwellingServiceId], references: [id], onDelete: Cascade)
  dwellingServiceId Int

  @@unique([dwellingServiceId, month, year])
}

model Order {
  id                String    @id @default(uuid())
  name              String
  type              OrderType
  description       String
  objectId          String
  object            Object    @relation(fields: [objectId], references: [id])
  dwellingId        Int?
  dwelling          Dwelling? @relation(fields: [dwellingId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  userId            Int
  user              User      @relation(fields: [userId], references: [id])
  companyId         String
  company           Company   @relation(fields: [companyId], references: [id])
  responsibleUserId Int?
  responsibleUser   User?     @relation("ResponsibleUser", fields: [responsibleUserId], references: [id])
  price             Decimal   @default(0)
  orderStatus       OrderStatus @default(RECEIVED)

  @@map("order")
}

enum CompanyType {
  OSBB
  ManagingCompany
  CottageTown
}

enum AclPermission {
  READ
  WRITE
}

enum CompanyStatus {
  PENDING
  PROCESSED
  INACTIVE
  BLOCKED
}

enum ObjectType {
  ApartmentBuilding
}

enum FraudStatus {
  CLEAR
  SUSPENDED
  BLOCKED
}

enum DwellingServiceStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}

enum OrderStatus {
  RECEIVED
  IN_PROGRESS
  FINISHED
  BLOCKED
  INVALID 
}

enum OrderType {
  ELECTRICITY
  WATER
  GAS
  ORGANIZATION
  OTHER
}

enum DwellingServicePaymentStatus {
  PENDING
  PAID
  OVERDUE
}
