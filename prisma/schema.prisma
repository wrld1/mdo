generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  email        String        @unique
  password     String
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isVerified   Boolean       @default(false)
  refreshToken String?
  fraudStatus  FraudStatus   @default(CLEAR)
  metadata     Json?         @db.JsonB
  Acl          Acl[]
  companies    UserCompany[]
  dwelling     Dwelling[]

  @@map("user")
}

model Company {
  id        String        @id @default(uuid())
  name      String?
  code      Int
  type      CompanyType
  status    CompanyStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  objects   Object[]
  users     UserCompany[]

  @@map("company")
}

model UserCompany {
  id        Int     @id @default(autoincrement())
  userId    Int
  companyId String
  company   Company @relation(fields: [companyId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, companyId])
}

model Object {
  id      String     @id @default(uuid())
  address String
  type    ObjectType

  company   Company?   @relation(fields: [companyId], references: [id])
  companyId String?
  services  Service[]
  dwelling  Dwelling[]
}

model Dwelling {
  id       Int  @id @default(autoincrement())
  number   Int  @unique
  floor    Int?
  entrance Int?

  objectId        String
  object          Object            @relation(fields: [objectId], references: [id], onDelete: Cascade)
  userId          Int?
  user            User?             @relation(fields: [userId], references: [id])
  services        Service[]
  DwellingService DwellingService[]
}

model DwellingService {
  id        Int                   @id @default(autoincrement())
  status    DwellingServiceStatus
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt
  amount    Decimal               @default(0)

  dwelling   Dwelling @relation(fields: [dwellingId], references: [id], onDelete: Cascade)
  dwellingId Int
  service    Service  @relation(fields: [serviceId], references: [id])
  serviceId  Int
}

model Service {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  price       String
  logo        String

  object          Object?           @relation(fields: [objectId], references: [id])
  objectId        String?
  dwelling        Dwelling?         @relation(fields: [dwellingId], references: [id])
  dwellingId      Int?
  DwellingService DwellingService[]
}

model Acl {
  id         Int           @id @default(autoincrement())
  userId     Int
  resource   String
  permission AclPermission
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum CompanyType {
  OSBB
  ManagingCompany
  CottageTown
}

enum AclPermission {
  READ
  WRITE
}

enum CompanyStatus {
  PENDING
  PROCESSED
  INACTIVE
  BLOCKED
}

enum ObjectType {
  ApartmentBuilding
}

enum FraudStatus {
  CLEAR
  SUSPENDED
  BLOCKED
}

enum DwellingServiceStatus {
  ACTIVE
  SUSPENDED
  INACTIVE
}
